'use strict';

var _transform = require('lodash/transform');
var _merge = require('lodash/merge');
var _isArray = require('lodash/isArray');

function MapTransformer(callback, parse) {
    if (!(this instanceof MapTransformer)) {
        return this.transform(new MapTransformer(callback, this.constructor));
    }

    this._parse = parse || require('../index');
    this._callback = callback;
    this._cache = {};
}

MapTransformer.prototype._createParse = function (key) {
    var parse = this._parse;
    var cache = this._cache;

    if (!(key in cache)) {
        cache[key] = this._callback(parse().select(key));
    }

    return cache[key];
};

MapTransformer.prototype.parse = function (source) {
    var _this = this;

    var accumulator = _isArray(source) ? [] : {};
    return _transform(source, function (result, value, key) {
        result[key] = _this._createParse(key).parse(source);
    }, accumulator);
};

MapTransformer.prototype.reverse = function (source) {
    var _this2 = this;

    var isArray = _isArray(source);
    var accumulator = isArray ? [] : {};
    return _transform(source, function (result, value, key) {
        var reverse = _this2._createParse(key).reverse(source[key]);
        if (isArray) result[key] = reverse[key];else _merge(result, reverse);
    }, accumulator);
};

module.exports = MapTransformer;